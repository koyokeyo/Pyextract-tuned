from PIL import Image
import yaml
from pathlib import Path
import os
from tqdm import tqdm
from concurrent.futures import ThreadPoolExecutor
import custom_pytesseract


def load_config():
    executable_path = os.path.abspath(__file__)
    executable_dir = os.path.dirname(executable_path)
    with open(f"{executable_dir}/config.yaml", "r") as file:
        yaml_data = yaml.safe_load(file)
    return yaml_data


def is_image_file(filename):
    image_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff']
    return any(filename.suffix.lower() == ext for ext in image_extensions)


def is_valid_image(image_path, max_size, resolution_x, resolution_y):
    if image_path.stat().st_size < max_size:
        return False
    with Image.open(image_path) as img:
        if img.size[0] < resolution_x or img.size[1] < resolution_y:
            return False
    return True


def image_to_string(image, language):
    return custom_pytesseract.image_to_string(image, lang=language)


def process_image(file, language):
    with Image.open(file) as img:
        img_to_append = image_to_string(img, language)
        return [file, img_to_append]


def main():
    yaml_data = load_config()
    result = []
    picture_max_size = yaml_data['max_size']
    picture_resolution_x = yaml_data['resolution_x']
    picture_resolution_y = yaml_data['resolution_y']
    directory = Path(os.path.expanduser(yaml_data["path_to_directory"]))
    files = [entry for entry in directory.iterdir() if
             entry.is_file() and is_image_file(entry) and is_valid_image(entry, picture_max_size, picture_resolution_x,
                                                                         picture_resolution_y)]

    with ThreadPoolExecutor() as executor:
        futures = [executor.submit(process_image, file, yaml_data["language"]) for file in
                   tqdm(files, desc="Processing Images")]
        for future in tqdm(futures, desc="Finalizing"):
            result.append(future.result())

    if yaml_data["save_data"]:
        save_directory = Path(os.path.expanduser(yaml_data["save_location"]))
        save_directory.mkdir(parents=True, exist_ok=True)

        for item in result:
            with open(item[0].with_suffix('.txt'), "w", encoding="utf-8") as file:
                file.write(item[1])

    if yaml_data["print_result"]:
        for item in result:
            print(f"{item[0].name}\n{item[1]}\n")


if __name__ == "__main__":
    main()
